Outstanding issues (list in reverse date order)

21 May 2021 (YQ)
- fixed tensorflow indexing issues, thanks for figuring out the functions!
  Code now runs past first physics_loss
- stabilised divide by zero in wallperm in constitutive.py. When z=0, 
  divide by zero encountered. Fixed problem by adding a small value 
  i.e. z + 1e-5, much smaller than dz
- since we are using reformat_params already, I decided to use it to 
  clean up opts and discard unnecessary variables
- TODO: set non-negative conditions for p,v; set condition for phi_g, mh
  to be between (0,1)

20 May 2021 (BM)
- changed data loading scheme to make it possible to pass opts
- updated a couple functions in constitutive.py and domegoveqn.py to deal
  with tensor indexing problem, but it's still a problem... 

14 May 2021 (YQ)
- changed var names mw --> mh
- one main issue: the input modelparams to get_physics should be opts, 
not model_params (model_params contains only the 12 parameters that we want to 
constrain, but the solver requires a lot more information that is contained
in opts), so that's why the physics_loss calculation is not working yet.


13 May 2021 (BM)
- Finished new dataset loading scheme, integrated into the conduit model
- Batch training will allow for learning across model params
- Training is slow. Need to investigate why.

12 May 2021 (BM)
- Added utils.py for utility functions
- Started switch to steady state model
- Build new classes for data handling which will allow for creation of tf.datasets for batching
- Design of tf.dataset anticipates data structures required in physics calculation

6 May 2021 (YQ)
- rewrote ssc in domegoveqn.py in F(nu,z) form with assigned bcs
- I plan to do a test run neural_tdc

5 May 2021 (BM)
- implemented loss function for F(nu,z) = 0 format
- implemented BCs loss
- added data_handler.model_params object property to store output structure from model (ss['m'])
- need to work on data generator for multiple runs, caching data, tf code for tf dataset management

1 May 2021 (YQ)
- completed ssc equations, debugged as much as I can 
- we can use the output structure from the model (i.e. ss['m']) to initialise the model parameter structure for get_physics. But this requires a bit of reformatting which can be done with reformat_params(m) in constitutive.py
- how to implement boundary conditions?
- write out physics-informed loss function so YQ can improve ssc code organisation. Issue with dp/dz appearing in mbe in a non-linear way.

